(() => {
let $1aae169a1a51f082$export$3d7865934588d77e;
(function(EventType) {
    EventType["CLICK"] = "click";
    EventType["CHANGE"] = "change";
    EventType["DBLCLICK"] = "dblclick";
    EventType["KEYDOWN"] = "keydown";
    EventType["SUBMIT"] = "submit";
    EventType["CONTEXTMENU"] = "contextmenu";
    EventType["DRAGSTART"] = "dragstart";
    EventType["DROP"] = "drop";
})($1aae169a1a51f082$export$3d7865934588d77e || ($1aae169a1a51f082$export$3d7865934588d77e = {}));
let $1aae169a1a51f082$export$75972070afd93869;
(function(KeydownType) {
    KeydownType["ESCAPE"] = "Escape";
    KeydownType["F1"] = "F1";
    KeydownType["F2"] = "F2";
    KeydownType["F3"] = "F3";
    KeydownType["F7"] = "F7";
    KeydownType["F10"] = "F10";
    KeydownType["TAB"] = "Tab";
})($1aae169a1a51f082$export$75972070afd93869 || ($1aae169a1a51f082$export$75972070afd93869 = {}));
let $1aae169a1a51f082$export$19ad8633adf38a6d;
(function(ControlAction) {
    ControlAction[ControlAction["START"] = 0] = "START";
    ControlAction[ControlAction["STOP"] = 1] = "STOP";
    ControlAction[ControlAction["RESET"] = 2] = "RESET";
    ControlAction[ControlAction["DELETE"] = 3] = "DELETE";
    ControlAction[ControlAction["MOVE"] = 4] = "MOVE";
    ControlAction[ControlAction["PUSH"] = 5] = "PUSH";
    ControlAction[ControlAction["EDIT"] = 6] = "EDIT";
    ControlAction[ControlAction["LOAD"] = 7] = "LOAD";
})($1aae169a1a51f082$export$19ad8633adf38a6d || ($1aae169a1a51f082$export$19ad8633adf38a6d = {}));
let $1aae169a1a51f082$export$a82430915e8eaf8e;
(function(RecState) {
    RecState[RecState["ON"] = 0] = "ON";
    RecState[RecState["OFF"] = 1] = "OFF";
    RecState[RecState["PAUSED"] = 2] = "PAUSED";
})($1aae169a1a51f082$export$a82430915e8eaf8e || ($1aae169a1a51f082$export$a82430915e8eaf8e = {}));


class $a47815ae80a06a17$export$2e2bcd8739ae039 {
    constructor(options){
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        this.overlay = document.createElement("div");
        this.overlay.className = options.className || "_ext-element-overlay";
        this.overlay.style.background = ((_a = options.style) === null || _a === void 0 ? void 0 : _a.background) || "rgba(250, 240, 202, 0.2)";
        this.overlay.style.borderColor = ((_b = options.style) === null || _b === void 0 ? void 0 : _b.borderColor) || "#F95738";
        this.overlay.style.borderStyle = ((_c = options.style) === null || _c === void 0 ? void 0 : _c.borderStyle) || "solid";
        this.overlay.style.borderRadius = ((_d = options.style) === null || _d === void 0 ? void 0 : _d.borderRadius) || "1px";
        this.overlay.style.borderWidth = ((_e = options.style) === null || _e === void 0 ? void 0 : _e.borderWidth) || "1px";
        this.overlay.style.boxSizing = ((_f = options.style) === null || _f === void 0 ? void 0 : _f.boxSizing) || "border-box";
        this.overlay.style.cursor = ((_g = options.style) === null || _g === void 0 ? void 0 : _g.cursor) || "crosshair";
        this.overlay.style.position = ((_h = options.style) === null || _h === void 0 ? void 0 : _h.position) || "absolute";
        this.overlay.style.zIndex = ((_j = options.style) === null || _j === void 0 ? void 0 : _j.zIndex) || "2147483647";
        this.shadowContainer = document.createElement("div");
        this.shadowContainer.className = "_ext-element-overlay-container";
        this.shadowContainer.style.position = "absolute";
        this.shadowContainer.style.top = "0px";
        this.shadowContainer.style.left = "0px";
        this.shadowRoot = this.shadowContainer.attachShadow({
            mode: "open"
        });
    }
    addToDOM(parent, useShadowDOM) {
        this.usingShadowDOM = useShadowDOM;
        if (useShadowDOM) {
            parent.insertBefore(this.shadowContainer, parent.firstChild);
            this.shadowRoot.appendChild(this.overlay);
        } else parent.appendChild(this.overlay);
    }
    removeFromDOM() {
        this.setBounds({
            x: 0,
            y: 0,
            width: 0,
            height: 0
        });
        this.overlay.remove();
        if (this.usingShadowDOM) this.shadowContainer.remove();
    }
    captureCursor() {
        this.overlay.style.pointerEvents = "auto";
    }
    ignoreCursor() {
        this.overlay.style.pointerEvents = "none";
    }
    setBounds({ x: x , y: y , width: width , height: height  }) {
        this.overlay.style.left = x + "px";
        this.overlay.style.top = y + "px";
        this.overlay.style.width = width + "px";
        this.overlay.style.height = height + "px";
    }
}


const $0d2e1d696ad9a5e9$export$abe5643cba19555f = (el)=>{
    const rect = el.getBoundingClientRect();
    return {
        x: window.pageXOffset + rect.left,
        y: window.pageYOffset + rect.top,
        width: el.offsetWidth,
        height: el.offsetHeight
    };
};


class $7c5d4ec7fb1c475d$export$2e2bcd8739ae039 {
    constructor(overlayOptions){
        this.handleMouseMove = (event)=>{
            this.mouseX = event.clientX;
            this.mouseY = event.clientY;
        };
        this.handleClick = (event)=>{
            var _a;
            if (this.target && ((_a = this.options) === null || _a === void 0 ? void 0 : _a.onClick)) this.options.onClick(this.target);
            event.preventDefault();
        };
        this.tick = ()=>{
            this.updateTarget();
            this.tickReq = window.requestAnimationFrame(this.tick);
        };
        this.active = false;
        this.overlay = new (0, $a47815ae80a06a17$export$2e2bcd8739ae039)(overlayOptions !== null && overlayOptions !== void 0 ? overlayOptions : {});
    }
    start(options) {
        var _a, _b;
        if (this.active) return false;
        this.active = true;
        this.options = options;
        document.addEventListener("mousemove", this.handleMouseMove, true);
        document.addEventListener("click", this.handleClick, true);
        this.overlay.addToDOM((_a = options.parentElement) !== null && _a !== void 0 ? _a : document.body, (_b = options.useShadowDOM) !== null && _b !== void 0 ? _b : true);
        this.tick();
        return true;
    }
    stop() {
        this.active = false;
        this.options = undefined;
        document.removeEventListener("mousemove", this.handleMouseMove, true);
        document.removeEventListener("click", this.handleClick, true);
        this.overlay.removeFromDOM();
        this.target = undefined;
        this.mouseX = undefined;
        this.mouseY = undefined;
        if (this.tickReq) window.cancelAnimationFrame(this.tickReq);
    }
    updateTarget() {
        var _a, _b;
        if (this.mouseX === undefined || this.mouseY === undefined) return;
        // Peek through the overlay to find the new target
        this.overlay.ignoreCursor();
        const elAtCursor = document.elementFromPoint(this.mouseX, this.mouseY);
        const newTarget = elAtCursor;
        this.overlay.captureCursor();
        // If the target hasn't changed, there's nothing to do
        if (!newTarget || newTarget === this.target) return;
        // If we have an element filter and the new target doesn't match,
        // clear out the target
        if ((_a = this.options) === null || _a === void 0 ? void 0 : _a.elementFilter) {
            if (!this.options.elementFilter(newTarget)) {
                this.target = undefined;
                this.overlay.setBounds({
                    x: 0,
                    y: 0,
                    width: 0,
                    height: 0
                });
                return;
            }
        }
        this.target = newTarget;
        const bounds = (0, $0d2e1d696ad9a5e9$export$abe5643cba19555f)(newTarget);
        this.overlay.setBounds(bounds);
        if ((_b = this.options) === null || _b === void 0 ? void 0 : _b.onHover) this.options.onHover(newTarget);
    }
}





const $8ee96a0c35d6f15f$var$defaultOptions = {
    escapeEverything: false,
    isIdentifier: false,
    quotes: "backtick",
    wrap: false
};
const $8ee96a0c35d6f15f$var$regexAnySingleEscape = /[ -,\.\/:-@\[-\^`\{-~]/;
const $8ee96a0c35d6f15f$var$regexSingleEscape = /[ -,\.\/:-@\[\]\^`\{-~]/;
const $8ee96a0c35d6f15f$var$regexExcessiveSpaces = /(^|\\+)?(\\[A-F0-9]{1,6})\x20(?![a-fA-F0-9\x20])/g;
function $8ee96a0c35d6f15f$export$4d8ccb164339c234(string, opt = {}) {
    const options = {
        ...$8ee96a0c35d6f15f$var$defaultOptions,
        ...opt
    };
    if (options.quotes != "single" && options.quotes != "double") options.quotes = "backtick";
    const quote = options.quotes == "backtick" ? "`" : '"';
    const isIdentifier = options.isIdentifier;
    const firstChar = string.charAt(0);
    let output = "";
    let counter = 0;
    const length = string.length;
    while(counter < length){
        const character = string.charAt(counter++);
        let codePoint = character.charCodeAt(0);
        let value = void 0;
        // If it’s not a printable ASCII character…
        if (codePoint < 0x20 || codePoint > 0x7e) {
            if (codePoint >= 0xd800 && codePoint <= 0xdbff && counter < length) {
                // It’s a high surrogate, and there is a next character.
                const extra = string.charCodeAt(counter++);
                if ((extra & 0xfc00) == 0xdc00) // next character is low surrogate
                codePoint = ((codePoint & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000;
                else // It’s an unmatched surrogate; only append this code unit, in case
                // the next code unit is the high surrogate of a surrogate pair.
                counter--;
            }
            value = "\\" + codePoint.toString(16).toUpperCase() + " ";
        } else {
            if (options.escapeEverything) {
                if ($8ee96a0c35d6f15f$var$regexAnySingleEscape.test(character)) value = "\\" + character;
                else value = "\\" + codePoint.toString(16).toUpperCase() + " ";
            } else if (/[\t\n\f\r\x0B]/.test(character)) value = "\\" + codePoint.toString(16).toUpperCase() + " ";
            else if (character == "\\" || !isIdentifier && (character == '"' && quote == character || character == "'" && quote == character) || isIdentifier && $8ee96a0c35d6f15f$var$regexSingleEscape.test(character)) value = "\\" + character;
            else value = character;
        }
        output += value;
    }
    if (isIdentifier) {
        if (/^-[-\d]/.test(output)) output = "\\-" + output.slice(1);
        else if (/\d/.test(firstChar)) output = "\\3" + firstChar + " " + output.slice(1);
    }
    // Remove spaces after `\HEX` escapes that are not followed by a hex digit,
    // since they’re redundant. Note that this is only possible if the escape
    // sequence isn’t preceded by an odd number of backslashes.
    output = output.replace($8ee96a0c35d6f15f$var$regexExcessiveSpaces, function($0, $1, $2) {
        if ($1 && $1.length % 2) // It’s not safe to remove the space, so don’t.
        return $0;
        // Strip the space.
        return ($1 || "") + $2;
    });
    if (!isIdentifier && options.wrap) return quote + output + quote;
    return output;
}


const $eca5f0a74b1f1765$export$b81b7dbe03f7c121 = (el)=>!!$eca5f0a74b1f1765$export$c8a20044beb8a172(el);
const $eca5f0a74b1f1765$export$c8a20044beb8a172 = (el)=>$eca5f0a74b1f1765$export$e1f445cd6eeea85e(`.tabber-content>kendo-tabstrip>[role='tabpanel'][aria-hidden='false']`)(el);
const $eca5f0a74b1f1765$export$1391212d75b2ee65 = (ms)=>new Promise((res)=>setTimeout(()=>res(0), ms));
const $eca5f0a74b1f1765$export$218c8c3169c024d2 = (el)=>{
    let id;
    if (id = el?.getAttribute("data-test")) return `[data-test='${id}']`;
    if (id = el?.getAttribute("parent-data-test")) return `[parent-data-test='${id}']`;
    if (id = el?.getAttribute("cmpid")) return `[cmpid='${id}']`;
    if (id = el?.getAttribute("data-cy")) return `[data-cy='${id}']`;
    return null;
};
const $eca5f0a74b1f1765$export$4a647155031ece = (el)=>{
    let settings;
    if (settings = el?.getAttribute("data-settings")) return JSON.parse(settings);
    return null;
};
const $eca5f0a74b1f1765$export$e1f445cd6eeea85e = (to)=>(from, stopOn, count)=>{
        const upSelectorToPred = (s)=>s ? typeof s === "object" ? (el)=>el === s : typeof s === "string" ? (el)=>el.matches(s) : s : (_)=>false;
        const targetPred = upSelectorToPred(to);
        const untilPred = upSelectorToPred(stopOn);
        while(from && !untilPred(from) && (!count || count > 0)){
            if (targetPred(from)) return from;
            if (typeof stopOn === "string" && from.matches(stopOn)) return null;
            from = from.parentElement;
            if (count) count--;
        }
        return null;
    };
const $eca5f0a74b1f1765$export$917fd6776815e690 = (el)=>el.tagName.toLowerCase().startsWith("tb-") || el.tagName.toLowerCase().startsWith("kendo-");
const $eca5f0a74b1f1765$export$f831dd079c3be771 = (el)=>$eca5f0a74b1f1765$export$218c8c3169c024d2(el) !== null;
const $eca5f0a74b1f1765$export$494b4b5b7c25b002 = $eca5f0a74b1f1765$export$e1f445cd6eeea85e($eca5f0a74b1f1765$export$917fd6776815e690);
const $eca5f0a74b1f1765$export$9813b7426bbdbcc3 = $eca5f0a74b1f1765$export$e1f445cd6eeea85e($eca5f0a74b1f1765$export$f831dd079c3be771);
const $eca5f0a74b1f1765$export$8733e2af6851723d = $eca5f0a74b1f1765$export$e1f445cd6eeea85e((el)=>$eca5f0a74b1f1765$export$f831dd079c3be771(el) || $eca5f0a74b1f1765$export$917fd6776815e690(el));
const $eca5f0a74b1f1765$export$8e1077bc36a840e3 = $eca5f0a74b1f1765$export$e1f445cd6eeea85e((el)=>$eca5f0a74b1f1765$export$f831dd079c3be771(el) && $eca5f0a74b1f1765$export$917fd6776815e690(el));
const $eca5f0a74b1f1765$export$3bf645f08efe3292 = (el, ...tags)=>tags.some((t)=>el?.tagName.toLowerCase() === t.toLowerCase());
function $eca5f0a74b1f1765$export$aeca4cd84e0bb2a4(input, pred) {
    const names = Array.from(input.classList).filter(pred);
    return names.map((name)=>"." + (0, $8ee96a0c35d6f15f$export$4d8ccb164339c234)(name, {
            isIdentifier: true
        }));
}
function $eca5f0a74b1f1765$export$a1a11b095f88289a(css) {
    return css.trim();
}


const $2ed861787b256cca$export$4659b591c19bdf3d = (map)=>(selector)=>selector in map ? map[selector] : "_" in map ? map["_"] : null;
$2ed861787b256cca$export$4659b591c19bdf3d({
    bear: "roar",
    bird: "cip",
    cat: "miao",
    dog: "bau",
    horse: "boh"
})("dog");
$2ed861787b256cca$export$4659b591c19bdf3d({
    bear: "roar",
    bird: "cip",
    cat: "miao",
    _: "boh"
})("dog");




const $108fceddea91583c$var$kendoGridRowIndexAttr = "data-kendo-grid-item-index";
const $108fceddea91583c$var$kendoGridColIndexAttr = "data-kendo-grid-column-index";
const $108fceddea91583c$var$kendoTreelistRowIndexAttr = "data-treelist-view-index";
const $108fceddea91583c$var$kendoTreelistColIndexAttr = "aria-colindex";
class $108fceddea91583c$export$518e6c43c5b1c30e {
    static isComponent(target, tagName) {
        var anc = (0, $eca5f0a74b1f1765$export$9813b7426bbdbcc3)(target);
        return (0, $eca5f0a74b1f1765$export$3bf645f08efe3292)(anc, tagName);
    }
    static capture(target, parsedEvent, tag, command, selector, attribute) {
        console.log("GenericCommandComponent capture");
        var anc = (0, $eca5f0a74b1f1765$export$9813b7426bbdbcc3)(target);
        const id = (0, $eca5f0a74b1f1765$export$218c8c3169c024d2)(anc);
        const value = this.getValue(target, selector, attribute);
        return (0, $100b2cdf1a1e5933$export$98d55a3b08386cd3)(command, parsedEvent)(id, target, {
            tag: tag,
            eventValue: value
        });
    }
    static getValue(target, selector, attribute) {
        if (selector) return target.querySelector(selector)?.getAttribute(attribute);
        else return target.getAttribute(attribute);
    }
}
class $108fceddea91583c$export$3047b0dd9385f89 {
    static isComponent(target) {
        return (0, $eca5f0a74b1f1765$export$e1f445cd6eeea85e)("tb-item-source")(target) || (0, $eca5f0a74b1f1765$export$e1f445cd6eeea85e)(".tb-popup-item-source-content")(target);
    }
    static async capture(target, parsedEvent, isPicker) {
        console.log("ItemSourceComponent capture");
        var ancParent = (0, $eca5f0a74b1f1765$export$9813b7426bbdbcc3)(target);
        if (ancParent.getAttribute("data-test")?.startsWith("itemSourceDropDownButton")) return Promise.resolve(null);
        if (ancParent.getAttribute("data-test")?.startsWith("itemSourceAddOnFly")) return Promise.resolve(null);
        const id = (0, $eca5f0a74b1f1765$export$218c8c3169c024d2)(ancParent);
        const valueDataTest = document.querySelector(id).getAttribute("parent-data-test");
        if (target.querySelector("input[selected-id]:disabled")) {
            var itemSourceInput = target.querySelector("input[selected-id]:disabled");
            return (0, $100b2cdf1a1e5933$export$98d55a3b08386cd3)("click", parsedEvent)((0, $eca5f0a74b1f1765$export$218c8c3169c024d2)(itemSourceInput), target, {
                tag: "ItemSource",
                force: true
            });
        }
        if (valueDataTest) {
            await (0, $eca5f0a74b1f1765$export$1391212d75b2ee65)(100);
            var itemSource = (0, $eca5f0a74b1f1765$export$e1f445cd6eeea85e)("tb-item-source")(document.querySelector(`[data-test='${valueDataTest}']`));
            const value = this.getValueFromSelector(valueDataTest);
            return (0, $100b2cdf1a1e5933$export$98d55a3b08386cd3)("select", parsedEvent)((0, $eca5f0a74b1f1765$export$218c8c3169c024d2)(itemSource), target, {
                tag: "ItemSource",
                eventValue: value
            });
        }
        if (isPicker) {
            var itemSourceInput = target.querySelector("[selected-id]") || target;
            var value1 = this.getValue(itemSourceInput);
            var itemSource = (0, $eca5f0a74b1f1765$export$e1f445cd6eeea85e)("tb-item-source")(itemSourceInput);
            return (0, $100b2cdf1a1e5933$export$98d55a3b08386cd3)("select", parsedEvent)(`${(0, $eca5f0a74b1f1765$export$218c8c3169c024d2)(itemSource)} ${(0, $eca5f0a74b1f1765$export$218c8c3169c024d2)(itemSourceInput)}`, itemSourceInput, {
                tag: "ItemSource",
                eventValue: value1
            });
        }
    }
    static getValueFromSelector(value) {
        var target = document.querySelector(`[data-test='${value}']`);
        return target?.getAttribute("selected-id");
    }
    static getValue(target) {
        return target?.getAttribute("selected-id");
    }
}
class $108fceddea91583c$export$40073d408f029a0b {
    static isComponent(target) {
        var anc = (0, $eca5f0a74b1f1765$export$9813b7426bbdbcc3)(target);
        return (0, $eca5f0a74b1f1765$export$3bf645f08efe3292)(anc, "tb-panel");
    }
    static capture(target, command, parsedEvent) {
        console.log("PanelComponent capture");
        var anc = (0, $eca5f0a74b1f1765$export$9813b7426bbdbcc3)(target);
        const id = (0, $eca5f0a74b1f1765$export$218c8c3169c024d2)(anc);
        return command(id, target, {
            tag: "TbPanel",
            display: "expand/collapse",
            other: anc.classList.contains("collapsed") ? "expand" : "collapse"
        });
    }
}
class $108fceddea91583c$export$d9f24a445e3fa038 {
    static isComponent(target) {
        return (0, $eca5f0a74b1f1765$export$e1f445cd6eeea85e)("tb-dynamic-checkbox-list")(target);
    }
    static capture(target, command, parsedEvent) {
        console.log("DynamicCheckboxComponent capture");
        var anc = (0, $eca5f0a74b1f1765$export$9813b7426bbdbcc3)(target);
        const id = (0, $eca5f0a74b1f1765$export$218c8c3169c024d2)(anc);
        if (target.tagName == "LABEL" || target.tagName == "SPAN") return null;
        return command(id, target, {
            tag: "DynamicCheckbox",
            eventValue: target.parentElement.querySelector("label").innerText,
            eventKey: parsedEvent?.key
        });
    }
}
class $108fceddea91583c$export$ecaa49d2dbf56de5 {
    static isComponent(target) {
        return (0, $eca5f0a74b1f1765$export$e1f445cd6eeea85e)("kendo-treelist")(target);
    }
    static capture(target, command, parsedEvent) {
        console.log("KendoTreeListComponent capture");
        var anc = (0, $eca5f0a74b1f1765$export$9813b7426bbdbcc3)(target);
        let id = undefined;
        if (target.tagName == "TD") id = (0, $eca5f0a74b1f1765$export$218c8c3169c024d2)(target.querySelector("[data-test]"));
        else id = (0, $eca5f0a74b1f1765$export$218c8c3169c024d2)(anc);
        if ((0, $eca5f0a74b1f1765$export$e1f445cd6eeea85e)("kendo-treelist-toolbar")(target) && anc.attributes["data-test"]) return command(id, anc);
        //if (target.attributes["data-test"]) return cmd.click(id, target);
        const row = (0, $eca5f0a74b1f1765$export$e1f445cd6eeea85e)("tr[" + $108fceddea91583c$var$kendoTreelistRowIndexAttr + "]")(target);
        if (row === null) {
            console.error("[MCR] no row index found.", target);
            return null;
        }
        const idx = row.getAttribute($108fceddea91583c$var$kendoTreelistRowIndexAttr); //ng-reflect-data-row-index (indice totale) - data-treelist-view-index (indice paginato) - ng-reflect-logical-row-index (indice logico totale)
        const td = (0, $eca5f0a74b1f1765$export$e1f445cd6eeea85e)("td")(target); //kendotreelistlogicalcell
        if ((target.tagName === "SPAN" || target.tagName === "DIV") && target.classList.contains("k-icon")) return command(id, target, {
            tag: target.classList.contains("k-i-caret-alt-right") || target.classList.contains("k-i-expand") ? "KendoTreelistExpand" : "KendoTreelistCollapse",
            idx: idx,
            nth: +td.getAttribute($108fceddea91583c$var$kendoTreelistColIndexAttr),
            eventValue: td.querySelector("span[data-test],div[data-test]") ? td.querySelector("span[data-test],div[data-test]")?.getAttribute("data-test") : ""
        });
        if (td.querySelectorAll("[data-test]").length === 0) return command(id, target, {
            tag: "KendoTreelistNativeCell",
            mainComponent: (0, $eca5f0a74b1f1765$export$218c8c3169c024d2)(this.isComponent(target)),
            idx: idx,
            nth: +td.getAttribute($108fceddea91583c$var$kendoTreelistColIndexAttr)
        });
        var settings = (0, $eca5f0a74b1f1765$export$4a647155031ece)(this.isComponent(target));
        return command(id, target, {
            tag: settings?.rowIndex ? "KendoTreelistRowIndex" : "KendoTreelist",
            idx: idx,
            nth: +td.getAttribute($108fceddea91583c$var$kendoGridColIndexAttr),
            mainComponent: (0, $eca5f0a74b1f1765$export$218c8c3169c024d2)(this.isComponent(target)),
            eventValue: td.querySelector("span[data-test]") ? td.querySelector("span[data-test]")?.getAttribute("data-test") : ""
        });
    }
}
class $108fceddea91583c$export$97fb74d06163c4cd {
    static isComponent(target) {
        return (0, $eca5f0a74b1f1765$export$e1f445cd6eeea85e)("kendo-grid")(target);
    }
    static capture(target, command, parsedEvent) {
        let vv = (0, $eca5f0a74b1f1765$export$e1f445cd6eeea85e);
        console.log("KendoGridComponent capture");
        if ((0, $eca5f0a74b1f1765$export$e1f445cd6eeea85e)("kendo-grid-toolbar")(target)) return null;
        var anc = (0, $eca5f0a74b1f1765$export$9813b7426bbdbcc3)(target);
        const id = (0, $eca5f0a74b1f1765$export$218c8c3169c024d2)(anc);
        if (id === (0, $eca5f0a74b1f1765$export$218c8c3169c024d2)(this.isComponent(target))) return null;
        let idx = (0, $eca5f0a74b1f1765$export$e1f445cd6eeea85e)("[" + $108fceddea91583c$var$kendoGridRowIndexAttr + "]")(target)?.getAttribute($108fceddea91583c$var$kendoGridRowIndexAttr);
        let nth = +(0, $eca5f0a74b1f1765$export$e1f445cd6eeea85e)("[" + $108fceddea91583c$var$kendoGridColIndexAttr + "]")(target)?.getAttribute($108fceddea91583c$var$kendoGridColIndexAttr);
        if (!idx) return command(id, target, {
            tag: `KendoGrid`,
            idx: idx,
            nth: nth,
            mainComponent: (0, $eca5f0a74b1f1765$export$218c8c3169c024d2)(this.isComponent(target)),
            display: "click kendo grid"
        });
        if ((0, $eca5f0a74b1f1765$export$e1f445cd6eeea85e)("kendo-grid")(target)) return command(id, target, {
            tag: `KendoGridRowIndex`,
            idx: idx,
            nth: nth,
            mainComponent: (0, $eca5f0a74b1f1765$export$218c8c3169c024d2)(this.isComponent(target)),
            display: "click grid index"
        });
    }
}
class $108fceddea91583c$export$1d82713ecf271015 {
    static isComponent(target) {
        return (0, $eca5f0a74b1f1765$export$e1f445cd6eeea85e)("tb-be")(target);
    }
    static capture(target, command, parsedEvent) {
        let vv = (0, $eca5f0a74b1f1765$export$e1f445cd6eeea85e);
        console.log("BodyEditComponent capture");
        var anc = (0, $eca5f0a74b1f1765$export$9813b7426bbdbcc3)(target);
        const id = (0, $eca5f0a74b1f1765$export$218c8c3169c024d2)(anc);
        let idx = (0, $eca5f0a74b1f1765$export$e1f445cd6eeea85e)("[" + $108fceddea91583c$var$kendoGridRowIndexAttr + "]")(target)?.getAttribute($108fceddea91583c$var$kendoGridRowIndexAttr);
        let nth = +(0, $eca5f0a74b1f1765$export$e1f445cd6eeea85e)("[" + $108fceddea91583c$var$kendoGridColIndexAttr + "]")(target)?.getAttribute($108fceddea91583c$var$kendoGridColIndexAttr);
        if (id == (0, $eca5f0a74b1f1765$export$218c8c3169c024d2)(this.isComponent(target)) && (!idx || target.classList.contains("k-grid-content"))) return command("[data-test='bodyEditPagerNumberDismissFocus']", target, {
            tag: "BodyEdit",
            mainComponent: (0, $eca5f0a74b1f1765$export$218c8c3169c024d2)(this.isComponent(target))
        });
        if (id && !idx && target.closest("kendo-grid thead tr > th")) return command(id, target, {
            tag: `BodyEdit`,
            mainComponent: (0, $eca5f0a74b1f1765$export$218c8c3169c024d2)(this.isComponent(target)),
            display: "click body edit header"
        });
        if (id && !idx && target.closest("tb-ev")) return command(id, target, {
            tag: `BEditView`,
            mainComponent: (0, $eca5f0a74b1f1765$export$218c8c3169c024d2)(this.isComponent(target)),
            display: "body edit view"
        });
        if (target.classList.contains("dummyRow")) return command(id, target, {
            tag: `BodyEditDummyRow`,
            mainComponent: (0, $eca5f0a74b1f1765$export$218c8c3169c024d2)(this.isComponent(target)),
            display: "add row"
        });
        if ((0, $eca5f0a74b1f1765$export$e1f445cd6eeea85e)("kendo-grid")(target)) return command(id, target, {
            tag: `BodyEditRow`,
            idx: idx,
            nth: nth,
            mainComponent: (0, $eca5f0a74b1f1765$export$218c8c3169c024d2)(this.isComponent(target)),
            display: "click body grid"
        });
        else return command(id, target, {
            tag: `BodyEdit`,
            mainComponent: (0, $eca5f0a74b1f1765$export$218c8c3169c024d2)(this.isComponent(target)),
            display: "click body edit"
        });
    }
}
class $108fceddea91583c$export$94c9456df3c9d7b1 {
    static isComponent(target) {
        return (0, $eca5f0a74b1f1765$export$e1f445cd6eeea85e)("kendo-window")(target);
    }
    static capture(target, command, parsedEvent) {
        console.log("WindowComponent capture");
        const el = (0, $eca5f0a74b1f1765$export$9813b7426bbdbcc3)(target);
        const id = (0, $eca5f0a74b1f1765$export$218c8c3169c024d2)(el);
        if (target.tagName == "SPAN" && target.parentElement?.hasAttribute("kendowindowcloseaction") || target.tagName == "BUTTON" && target.hasAttribute("kendowindowcloseaction")) return command("Kendo-Window", target, {
            tag: "WindowClose",
            display: "close window"
        });
        return command(id, target, {
            tag: "Window" /*, scope: 'All'*/ 
        });
    }
}
class $108fceddea91583c$export$24ec15341293d56f {
    static isComponent(target) {
        return (0, $eca5f0a74b1f1765$export$e1f445cd6eeea85e)("kendo-dialog")(target);
    }
    static capture(target, command, parsedEvent) {
        console.log("DialogComponent capture");
        const el = (0, $eca5f0a74b1f1765$export$9813b7426bbdbcc3)(target);
        const id = (0, $eca5f0a74b1f1765$export$218c8c3169c024d2)(el);
        if ((0, $eca5f0a74b1f1765$export$e1f445cd6eeea85e)("kendo-dialog-actions")(target)) {
            if (target.closest("mc-scheduler-app")) return command("text=" + target.closest("button").querySelector(".k-button-text").innerText, target.closest("button"), {
                tag: "DialogActionsScheduler",
                display: "dialog actions"
            });
            return command(id ? id : "kendo-dialog", target, {
                tag: "DialogActions",
                display: "dialog actions"
            });
        }
        if (!el && (0, $eca5f0a74b1f1765$export$e1f445cd6eeea85e)("kendo-dialog-titlebar")(target) && target.tagName == "SPAN" && target.parentElement?.hasAttribute("title") && target.parentElement.getAttribute("aria-label") == "Close" || target.tagName == "BUTTON" && target.hasAttribute("title") && target.getAttribute("aria-label") == "Close") return command("Kendo-Dialog", target, {
            tag: "DialogClose",
            display: "close dialog"
        });
        if (!id) return null;
        return command(id, target, {
            tag: "Dialog" /*, scope: 'All'*/ 
        });
    }
}
class $108fceddea91583c$export$9cca54ee596bd686 {
    static isComponent(target) {
        return (0, $eca5f0a74b1f1765$export$e1f445cd6eeea85e)("tb-dockpane-container")(target);
    }
    static isDesignState(target) {
        return !!(0, $eca5f0a74b1f1765$export$e1f445cd6eeea85e)("tb-dockpane-container.tb-design-state")(target);
    }
    static capture(target, command, parsedEvent) {
        console.log("DockerComponent capture");
        //const wrap = { up, upToId, upToCtrlWithId, getId };
        var tabberSelectorTarget = (0, $eca5f0a74b1f1765$export$e1f445cd6eeea85e)(".dockpane-tabber-selector")(target);
        if (tabberSelectorTarget == null) {
            var container = (0, $eca5f0a74b1f1765$export$e1f445cd6eeea85e)("tb-dockpane-container")(target);
            var tabberSelector = container.querySelector(".dockpane-tabber-selector ul li.active");
            const id = (0, $eca5f0a74b1f1765$export$218c8c3169c024d2)(tabberSelector);
            return command(id, tabberSelector, {
                tag: "DockPane"
            });
        }
        return null;
    }
}
class $108fceddea91583c$export$5dab2a3f827061f6 {
    static isComponent(target) {
        return (0, $eca5f0a74b1f1765$export$e1f445cd6eeea85e)("kendo-upload")(target);
    }
    static capture(target, command, parsedEvent) {
        console.log("KendoUploadComponent capture");
        if (target.tagName == "INPUT" && target.parentElement.classList.contains("k-upload-button")) return command("kendo-upload div.k-upload-button input", target, {
            tag: "KendoUpload",
            display: "select file"
        });
        if (target.tagName == "BUTTON" && target.classList.contains("k-upload-selected")) return command("kendo-upload-action-buttons button.k-upload-selected", target, {
            tag: "KendoUpload",
            display: "upload file"
        });
        if (target.tagName == "BUTTON" && target.classList.contains("k-clear-selected")) return command("kendo-upload-action-buttons button.k-clear-selected", target, {
            tag: "KendoUpload",
            display: "clear file selected"
        });
        return null;
    }
}
class $108fceddea91583c$export$9ea6347596840518 {
    static isComponent(target) {
        return (0, $eca5f0a74b1f1765$export$e1f445cd6eeea85e)("tb-radar-customisable-grid")(target);
    }
    static capture(target, command, parsedEvent) {
        console.log("RadarComponent capture");
        let vv = (0, $eca5f0a74b1f1765$export$e1f445cd6eeea85e);
        const ownerDoc = (0, $eca5f0a74b1f1765$export$e1f445cd6eeea85e)((el)=>el.tagName.startsWith("TB-IDD"))(target);
        const row = (0, $eca5f0a74b1f1765$export$e1f445cd6eeea85e)("tr[" + $108fceddea91583c$var$kendoGridRowIndexAttr + "]")(target);
        if (row === null) {
            console.error("[MCR] no row index found.", target);
            return null;
        }
        const idx = row.getAttribute($108fceddea91583c$var$kendoGridRowIndexAttr);
        const el = (0, $eca5f0a74b1f1765$export$9813b7426bbdbcc3)(target);
        const id = (0, $eca5f0a74b1f1765$export$218c8c3169c024d2)(el);
        const isWebStyle = (0, $eca5f0a74b1f1765$export$e1f445cd6eeea85e)("kendo-grid")(target)?.classList?.contains("mode1");
        return command(id, target, {
            tag: isWebStyle ? "TbRadarWebStyle" : "TbRadarTableStyle",
            parent: ownerDoc?.tagName,
            idx: idx,
            display: "radar: click row " + idx
        });
    }
}


const $100b2cdf1a1e5933$var$capturingControls = [
    "tb-date-edit",
    "tb-application-date",
    "tb-enum-combo",
    "kendo-dropdownlist",
    "kendo-combobox",
    "kendo-multicolumncombobox",
    "kendo-multiselect"
]; // TS 3.4
const $100b2cdf1a1e5933$var$ctrl = {
    needsCapture: (el)=>(0, $eca5f0a74b1f1765$export$3bf645f08efe3292)(el, ...$100b2cdf1a1e5933$var$capturingControls),
    capturedValue: (capturedBy)=>(0, $2ed861787b256cca$export$4659b591c19bdf3d)({
            "tb-enum-combo": ()=>(0, $108fceddea91583c$export$518e6c43c5b1c30e).getValue(capturedBy, "[selected-code]", "selected-code"),
            "kendo-dropdownlist": ()=>(0, $108fceddea91583c$export$518e6c43c5b1c30e).getValue(capturedBy, undefined, "selected-code"),
            "kendo-multiselect": ()=>(0, $108fceddea91583c$export$518e6c43c5b1c30e).getValue(capturedBy, undefined, "selected-code"),
            "kendo-combobox": ()=>(0, $108fceddea91583c$export$518e6c43c5b1c30e).getValue(capturedBy, undefined, "selected-code"),
            "kendo-multicolumncombobox": ()=>(0, $108fceddea91583c$export$518e6c43c5b1c30e).getValue(capturedBy, undefined, "selected-code"),
            "tb-date-edit": ()=>(0, $108fceddea91583c$export$518e6c43c5b1c30e).getValue(capturedBy, "textarea, input", "selected-date"),
            "tb-application-date": ()=>(0, $108fceddea91583c$export$518e6c43c5b1c30e).getValue(capturedBy, "textarea, input", "selected-date"),
            _: ()=>capturedBy.querySelector("textarea, input")?.value
        })(capturedBy.tagName.toLowerCase())()
};
const $100b2cdf1a1e5933$var$handleCapturingControls = (()=>{
    let capturedBy = null;
    let oldValue = "";
    return async (target, parsedEvent)=>{
        console.log("handleCapturingControls capturedBy", capturedBy?.tagName);
        let vv = $100b2cdf1a1e5933$var$ctrl;
        const capture = ()=>{
            oldValue = "";
            capturedBy = $100b2cdf1a1e5933$var$ctrl.needsCapture(tmp) ? tmp : null;
            oldValue = capturedBy ? $100b2cdf1a1e5933$var$ctrl.capturedValue(capturedBy) : "";
            return capturedBy;
        };
        const tmp = (0, $eca5f0a74b1f1765$export$8e1077bc36a840e3)(target);
        if (capturedBy === null) return [
            [],
            capture()
        ];
        if (capturedBy && (0, $eca5f0a74b1f1765$export$e1f445cd6eeea85e)("cdk-virtual-scroll-viewport, kendo-calendar, kendo-list")(target)) return [
            [],
            capturedBy
        ];
        const outsideOfActiveCtrl = tmp === null && capturedBy !== null && !capturedBy.contains(target);
        const activeCtrlChanged = outsideOfActiveCtrl || tmp !== capturedBy || parsedEvent.action === (0, $1aae169a1a51f082$export$3d7865934588d77e).KEYDOWN && parsedEvent.key === "Tab";
        if (!activeCtrlChanged) return [
            [],
            capturedBy
        ];
        //await delay(100);
        const value = $100b2cdf1a1e5933$var$ctrl.capturedValue(capturedBy);
        console.log("handleCapturingControls control value", value, oldValue, capturedBy?.tagName);
        if (value === oldValue) return [
            [],
            capture()
        ];
        if ((0, $108fceddea91583c$export$518e6c43c5b1c30e).isComponent(capturedBy, "tb-enum-combo")) return [
            [
                (0, $108fceddea91583c$export$518e6c43c5b1c30e).capture(capturedBy, parsedEvent, "EnumCombo", "select", "[selected-code]", "selected-code")
            ],
            capture()
        ];
        if ((0, $108fceddea91583c$export$518e6c43c5b1c30e).isComponent(capturedBy, "kendo-dropdownlist")) return [
            [
                (0, $108fceddea91583c$export$518e6c43c5b1c30e).capture(capturedBy, parsedEvent, "KendoDropdownlist", "select", undefined, "selected-code")
            ],
            capture()
        ];
        if ((0, $108fceddea91583c$export$518e6c43c5b1c30e).isComponent(capturedBy, "kendo-multiselect")) return [
            [
                (0, $108fceddea91583c$export$518e6c43c5b1c30e).capture(capturedBy, parsedEvent, "KendoDropdownlist", "select", undefined, "selected-code")
            ],
            capture()
        ];
        if ((0, $108fceddea91583c$export$518e6c43c5b1c30e).isComponent(capturedBy, "kendo-combobox")) return [
            [
                (0, $108fceddea91583c$export$518e6c43c5b1c30e).capture(capturedBy, parsedEvent, "KendoDropdownlist", "select", undefined, "selected-code")
            ],
            capture()
        ];
        if ((0, $108fceddea91583c$export$518e6c43c5b1c30e).isComponent(capturedBy, "kendo-multicolumncombobox")) return [
            [
                (0, $108fceddea91583c$export$518e6c43c5b1c30e).capture(capturedBy, parsedEvent, "KendoDropdownlist", "select", undefined, "selected-code")
            ],
            capture()
        ];
        if ((0, $108fceddea91583c$export$518e6c43c5b1c30e).isComponent(capturedBy, "tb-date-edit")) return [
            [
                (0, $108fceddea91583c$export$518e6c43c5b1c30e).capture(capturedBy, parsedEvent, undefined, "write", "textarea, input", "selected-date")
            ],
            capture()
        ];
        if ((0, $108fceddea91583c$export$518e6c43c5b1c30e).isComponent(capturedBy, "tb-application-date")) return [
            [
                (0, $108fceddea91583c$export$518e6c43c5b1c30e).capture(capturedBy, parsedEvent, undefined, "write", "textarea, input", "selected-date")
            ],
            capture()
        ];
        return [
            [],
            capture()
        ];
    };
})();
const $100b2cdf1a1e5933$var$toopt = (selector, el, options, parsedEvent)=>{
    options = options ?? {};
    if (parsedEvent?.value !== null && parsedEvent?.value !== undefined && parsedEvent?.value.length >= 0 && !options.eventValue) options.eventValue = parsedEvent?.value.toString().replace(/'/g, "\\'");
    if (parsedEvent?.key && !options.eventKey) options.eventKey = parsedEvent?.key.toString().replace(/'/g, "\\'");
    if (parsedEvent?.modifiers?.length > 0) options.keyboardModifier = parsedEvent.modifiers;
    if (parsedEvent?.pageIndex !== undefined) options.pageIndex = parsedEvent.pageIndex;
    options.force = options.force === true || !!(el?.hasAttribute("disabled") || el?.getAttribute("disabled"));
    options.retry = false;
    if (!options?.scope && !(0, $eca5f0a74b1f1765$export$b81b7dbe03f7c121)(el)) return {
        ...options,
        scope: "all"
    };
    if (options) return options;
    return {};
};
const $100b2cdf1a1e5933$export$98d55a3b08386cd3 = (cmd, parsedEvent)=>(selector, target, options)=>{
        return {
            Type: cmd,
            Selector: (0, $8ee96a0c35d6f15f$export$4d8ccb164339c234)(selector) + $100b2cdf1a1e5933$var$getTagName(target),
            Options: $100b2cdf1a1e5933$var$toopt(selector, target, options, parsedEvent)
        };
    };
// export const cmd = {
//   write: tocmd("write"),
//   select: tocmd("select"),
//   click: tocmd("click"),
//   keydown: tocmd("keydown"),
//   pick: tocmd("pick"),
// };
let $100b2cdf1a1e5933$var$pendingDrag = undefined;
let $100b2cdf1a1e5933$var$skipFind = false;
function $100b2cdf1a1e5933$var$getTagName(target) {
    if (target.attributes["data-test"] || target.attributes["data-cy"] || target.attributes["cmpId"]) return "";
    var element = (0, $eca5f0a74b1f1765$export$8e1077bc36a840e3)(target);
    if (!element) return "";
    if (element.tagName.startsWith("TB-")) {
        var e = target.tagName.toLowerCase();
        if ([
            "input",
            "select",
            "textarea"
        ].includes(e)) return " " + e;
        else if ((0, $eca5f0a74b1f1765$export$218c8c3169c024d2)(target.closest("button")) == null && element.contains(target.closest("button"))) return " button";
    }
    return "";
}
function $100b2cdf1a1e5933$var$evaluatePostWaitCommand(target, res, parsedEvent) {
    if (parsedEvent?.modifiers?.includes("Control")) return $100b2cdf1a1e5933$export$98d55a3b08386cd3("wait", parsedEvent)("", target, {
        value: "5000"
    });
    return null;
}
function $100b2cdf1a1e5933$var$evaluatePreWaitCommand(target, res, parsedEvent) {
    var selectors, attr;
    return res; // disabilitato per il momento
}
async function $100b2cdf1a1e5933$export$e580b1cbf68957c3(target, command, parsedEvent, res = [], picker = false) {
    try {
        var firstClosestId = (0, $eca5f0a74b1f1765$export$9813b7426bbdbcc3)(target);
        //if (firstClosestId?.hasAttribute("disabled")) return res; //hyperlink ora lo registro
        if ((0, $eca5f0a74b1f1765$export$e1f445cd6eeea85e)("tb-checkbox")(target) && !target.matches(`input[type='checkbox']`)) return res;
        res = $100b2cdf1a1e5933$var$evaluatePreWaitCommand(target, res, parsedEvent);
        let com = undefined;
        let dockPanecCom = undefined;
        if (!(0, $108fceddea91583c$export$9cca54ee596bd686).isDesignState(target) && (0, $108fceddea91583c$export$9cca54ee596bd686).isComponent(target) && !com && picker === false) dockPanecCom = (0, $108fceddea91583c$export$9cca54ee596bd686).capture(target, command, parsedEvent);
        if ((0, $108fceddea91583c$export$3047b0dd9385f89).isComponent(target)) com = await (0, $108fceddea91583c$export$3047b0dd9385f89).capture(target, parsedEvent, picker);
        if ((0, $108fceddea91583c$export$5dab2a3f827061f6).isComponent(target) && !com) com = (0, $108fceddea91583c$export$5dab2a3f827061f6).capture(target, command, parsedEvent);
        if ((0, $108fceddea91583c$export$9ea6347596840518).isComponent(target) && !com) com = (0, $108fceddea91583c$export$9ea6347596840518).capture(target, command, parsedEvent);
        if (((0, $108fceddea91583c$export$97fb74d06163c4cd).isComponent(target) || (0, $108fceddea91583c$export$1d82713ecf271015).isComponent(target)) && !com) {
            if ((0, $108fceddea91583c$export$1d82713ecf271015).isComponent(target) && !com) com = (0, $108fceddea91583c$export$1d82713ecf271015).capture(target, command, parsedEvent); //tb-be
            else com = (0, $108fceddea91583c$export$97fb74d06163c4cd).capture(target, command, parsedEvent); //kendo-grid semplice
        }
        if ((0, $108fceddea91583c$export$ecaa49d2dbf56de5).isComponent(target) && !com) com = (0, $108fceddea91583c$export$ecaa49d2dbf56de5).capture(target, command, parsedEvent);
        if ((0, $108fceddea91583c$export$d9f24a445e3fa038).isComponent(target) && !com) com = (0, $108fceddea91583c$export$d9f24a445e3fa038).capture(target, command, parsedEvent);
        if ((0, $108fceddea91583c$export$40073d408f029a0b).isComponent(target) && !com) com = (0, $108fceddea91583c$export$40073d408f029a0b).capture(target, command, parsedEvent);
        if ((0, $108fceddea91583c$export$24ec15341293d56f).isComponent(target) && !com) com = (0, $108fceddea91583c$export$24ec15341293d56f).capture(target, command, parsedEvent);
        if ((0, $108fceddea91583c$export$94c9456df3c9d7b1).isComponent(target) && !com) com = (0, $108fceddea91583c$export$94c9456df3c9d7b1).capture(target, command, parsedEvent);
        if (com) return [
            ...res,
            dockPanecCom,
            com
        ];
        console.log("generic selector for target: ", target, firstClosestId, (0, $eca5f0a74b1f1765$export$218c8c3169c024d2)(firstClosestId));
        if (!firstClosestId && parsedEvent.action !== "keydown") {
            console.log("firstClosestId not found");
            return res;
        }
        return [
            ...res,
            dockPanecCom,
            command(firstClosestId ? (0, $eca5f0a74b1f1765$export$218c8c3169c024d2)(firstClosestId) : "[data-test-app-root]", target, {
                force: false
            })
        ];
    } catch (error) {
        console.error(error);
    }
}
async function $100b2cdf1a1e5933$export$dc1aaf6398cf38a9(fromElement, toElement, parsedEvent) {
    try {
        var anc = (0, $eca5f0a74b1f1765$export$9813b7426bbdbcc3)(fromElement.target);
        const fromId = (0, $eca5f0a74b1f1765$export$218c8c3169c024d2)(anc);
        anc = (0, $eca5f0a74b1f1765$export$9813b7426bbdbcc3)(toElement.target);
        const toId = (0, $eca5f0a74b1f1765$export$218c8c3169c024d2)(anc);
        return [
            $100b2cdf1a1e5933$export$98d55a3b08386cd3("dragdrop", parsedEvent)(toId, toElement.target, {
                tag: "DragDrop",
                fromSelector: fromId
            })
        ];
    } catch (error) {
        console.error(error);
    }
    return [];
}
async function $100b2cdf1a1e5933$var$magofind(event, parsedEvent) {
    if ($100b2cdf1a1e5933$var$skipFind) {
        console.log("[MCR] find skipped.", event, parsedEvent);
        return [];
    }
    let target = event.target;
    if ($100b2cdf1a1e5933$var$skip(event, parsedEvent)) return [];
    $100b2cdf1a1e5933$var$skipFind = true;
    const [res, capturedBy] = await $100b2cdf1a1e5933$var$handleCapturingControls(target, parsedEvent);
    $100b2cdf1a1e5933$var$skipFind = false;
    if (capturedBy !== null) return res;
    let command = undefined;
    switch(parsedEvent.action){
        case (0, $1aae169a1a51f082$export$3d7865934588d77e).DRAGSTART:
            $100b2cdf1a1e5933$var$pendingDrag = event;
            return [];
        case (0, $1aae169a1a51f082$export$3d7865934588d77e).DROP:
            if (!$100b2cdf1a1e5933$var$pendingDrag) return [];
            return $100b2cdf1a1e5933$export$dc1aaf6398cf38a9($100b2cdf1a1e5933$var$pendingDrag, event, parsedEvent);
        case (0, $1aae169a1a51f082$export$3d7865934588d77e).CHANGE:
            command = $100b2cdf1a1e5933$export$98d55a3b08386cd3("write", parsedEvent);
            return $100b2cdf1a1e5933$export$e580b1cbf68957c3(target, command, parsedEvent, res);
        case (0, $1aae169a1a51f082$export$3d7865934588d77e).KEYDOWN:
            {
                command = $100b2cdf1a1e5933$export$98d55a3b08386cd3("keydown", parsedEvent);
                const keyTypesAccepted = [
                    (0, $1aae169a1a51f082$export$75972070afd93869).ESCAPE,
                    (0, $1aae169a1a51f082$export$75972070afd93869).F1,
                    (0, $1aae169a1a51f082$export$75972070afd93869).F2,
                    (0, $1aae169a1a51f082$export$75972070afd93869).F3,
                    (0, $1aae169a1a51f082$export$75972070afd93869).F7,
                    (0, $1aae169a1a51f082$export$75972070afd93869).F10
                ]; //tab da gestire
                if (!keyTypesAccepted.map((x)=>x.toString()).includes(parsedEvent.key)) return res;
                return $100b2cdf1a1e5933$export$e580b1cbf68957c3(document.activeElement, command, parsedEvent, res);
            }
        case (0, $1aae169a1a51f082$export$3d7865934588d77e).DBLCLICK:
            command = $100b2cdf1a1e5933$export$98d55a3b08386cd3("dblclick", parsedEvent);
            return $100b2cdf1a1e5933$export$e580b1cbf68957c3(target, command, parsedEvent, res);
        case (0, $1aae169a1a51f082$export$3d7865934588d77e).CONTEXTMENU:
        case (0, $1aae169a1a51f082$export$3d7865934588d77e).CLICK:
            command = $100b2cdf1a1e5933$export$98d55a3b08386cd3("click", parsedEvent);
            return $100b2cdf1a1e5933$export$e580b1cbf68957c3(target, command, parsedEvent, res);
    }
    return res;
}
const $100b2cdf1a1e5933$var$skip = (_, parsedEvent)=>(parsedEvent.action === (0, $1aae169a1a51f082$export$3d7865934588d77e).CHANGE || parsedEvent.action === (0, $1aae169a1a51f082$export$3d7865934588d77e).KEYDOWN) && (parsedEvent.inputType === "checkbox" || parsedEvent.inputType === "radio");
async function $100b2cdf1a1e5933$export$2e2bcd8739ae039(event) {
    //console.log('parseEvent', event);
    const parsedEvent = {
        action: event.type,
        tag: event.target.tagName,
        value: [
            "checkbox",
            "radio"
        ].includes(event.target.type) ? event.target.checked + "" : event.target.value,
        pageIndex: window["___mcr___pageIndex"] !== undefined ? window["___mcr___pageIndex"] : 0
    };
    if (event.target.hasAttribute("href")) parsedEvent.href = event.target.href;
    if (event.target.hasAttribute("id")) parsedEvent.id = event.target.id;
    if (parsedEvent.tag === "INPUT") parsedEvent.inputType = event.target.type;
    if (event.type === "keydown") parsedEvent.key = event.key;
    var modifiers = [
        "Alt",
        "Control",
        "Meta",
        "Shift"
    ];
    parsedEvent.modifiers = [];
    modifiers.forEach((mod)=>{
        if ((event instanceof KeyboardEvent || event instanceof PointerEvent) && event.getModifierState(mod)) parsedEvent.modifiers.push(mod);
    });
    let res = await $100b2cdf1a1e5933$var$magofind(event, parsedEvent);
    res = res.filter((x)=>!!x); //tolgo i nulli
    console.log("res: ", res);
    return res.map((x)=>({
            ...x,
            EventType: parsedEvent.action
        })).map((command)=>({
            ...parsedEvent,
            command: command
        }));
}



function $4068186cacd1ad2c$var$handleEvent(event) {
    if (!event.isTrusted) return;
    (0, $100b2cdf1a1e5933$export$2e2bcd8739ae039)(event).then((e)=>{
        if (window["___mcr___send"]) window["___mcr___send"](JSON.stringify({
            type: "commands",
            content: JSON.stringify(e.map((x)=>x.command))
        }));
    });
}
function $4068186cacd1ad2c$var$addDOMListeners() {
    if (window["___mcr___isListening"]) {
        console.error("[mcr] addDOMListeners: already listening");
        return;
    }
    window["___mcr___isListening"] = true;
    Object.values((0, $1aae169a1a51f082$export$3d7865934588d77e)).forEach((event)=>{
        document.addEventListener(event, $4068186cacd1ad2c$var$handleEvent, {
            capture: true,
            passive: true
        });
    });
    console.log("[mcr] addDOMListeners: done");
}
function $4068186cacd1ad2c$var$removeDOMListeners() {
    if (!window["___mcr___isListening"]) {
        console.log("[mcr] removeDOMListeners: already not listening");
        return;
    }
    delete window["___mcr___isListening"];
    Object.values((0, $1aae169a1a51f082$export$3d7865934588d77e)).forEach((event)=>{
        document.removeEventListener(event, $4068186cacd1ad2c$var$handleEvent, {
            capture: true
        });
    });
    console.log("[mcr] removeDOMListeners: done");
}
async function $4068186cacd1ad2c$var$pick(uid) {
    const picker = new (0, $7c5d4ec7fb1c475d$export$2e2bcd8739ae039)();
    picker.start({
        elementFilter: (el)=>{
            return (0, $eca5f0a74b1f1765$export$e1f445cd6eeea85e)("[cmpid]")(el) || (0, $eca5f0a74b1f1765$export$e1f445cd6eeea85e)("[data-test]")(el) || (0, $eca5f0a74b1f1765$export$e1f445cd6eeea85e)("[data-cy]")(el);
        },
        onHover: (el)=>console.log(el),
        onClick: async (el)=>{
            picker.stop();
            console.log(`Picked: ${el}`);
            const ctrl = (0, $eca5f0a74b1f1765$export$e1f445cd6eeea85e)("[cmpid]")(el) || (0, $eca5f0a74b1f1765$export$e1f445cd6eeea85e)("[data-test]")(el) || (0, $eca5f0a74b1f1765$export$e1f445cd6eeea85e)("[data-cy]")(el);
            if (!ctrl) return;
            const parsedEvent = {
                action: "pick",
                tag: el.tagName,
                value: el.value,
                pageIndex: window["___mcr___pageIndex"]
            };
            var res = await (0, $100b2cdf1a1e5933$export$e580b1cbf68957c3)(el, (0, $100b2cdf1a1e5933$export$98d55a3b08386cd3)("pick", parsedEvent), parsedEvent, [], true);
            res = res.filter((x)=>!!x); //tolgo i nulli
            res.map((x)=>{
                if (x.Options) {
                    var el = document.querySelectorAll(x.Selector);
                    for(var i = 0; i < el.length; i++){
                        var xx = el[i].closest(".tabber-content>kendo-tabstrip>[role='tabpanel'][aria-hidden='false']");
                        if (!xx) continue;
                        x.Options.scope = "Document";
                    }
                    if (!x.Options.scope) x.Options.scope = "All";
                }
            });
            let value = "";
            if (res.length === 1) {
                var sel = document.querySelector(res[0].Selector);
                if (sel instanceof HTMLInputElement) value = sel.value;
                else value = sel.querySelector("input,textarea")?.value;
                res[0].Options.value = value;
            }
            console.log("Element picker", res, value);
            if (window["___mcr___send"]) window["___mcr___send"](JSON.stringify({
                type: "pick",
                content: JSON.stringify(res),
                uid: uid,
                value: value
            }));
        }
    });
}
async function $4068186cacd1ad2c$var$setPageIndex(index) {
    window["___mcr___pageIndex"] = index;
}
function $4068186cacd1ad2c$var$initialize() {
    window["___mcr___injected"] = true;
    window["___mcr___startListening"] = $4068186cacd1ad2c$var$addDOMListeners;
    window["___mcr___stopListening"] = $4068186cacd1ad2c$var$removeDOMListeners;
    window["___mcr___page"] = $4068186cacd1ad2c$var$setPageIndex;
    window["___mcr___pick"] = $4068186cacd1ad2c$var$pick;
}
$4068186cacd1ad2c$var$initialize();

})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
